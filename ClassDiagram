@startuml
package View {

class View {
+ {method} menu() : Int 

+ {method} choiceSensor(List<Sensor>) : Sensor 

+ {method} choicePosition() : List<Float>

+ {method} choiceMoment() : Timestamp

+ {method} printDataPrivateIndiv (List<Sensor>) : void

+ {method} printMeanCicle(Float) : void

+ {method} printExcludeIndividual (PrivateIndividual) : void

+ {method} printPoints(Int points) : void

+ {method} printQualityCloseSensor(List<Sensor>) : void

}

  
}

package Controler {

class Controler {
- db : Database*

+ {method} createDb(): void
+ {method} getDb() : Database*
+ {method} updateReliability(string UserId, bool isreliable) : Boolean
+ {method} checkIfEfficient(string cleanerId): Boolean
+ {method} SensorDataPrivateUser(string UserId) : Vector<Measurement>
+ {method} checkIfReliable(string userID, string timeStart, string timeStop) : Boolean

# {method}stringToTimeT(string& dateStr) : Timestamps

# {method} compareDates(time_t date1, time_t date2) : Boolean
# {method}getMeasurementsBetweenDates(vector<Measurement> Measurements, string sensorName, string attributeID, time_t startDate, time_t endDate) : Vector<Measurement> 
# {method}sortSensorsByDistance( vector<Sensor> sensors,  Cleaner cleaner): Vector<Sensor> 
# {method}CalculateAtmoIndex (float O3, float NO2, float SO2, float PM10): Float


}



  
}

package Model {


class GovAgency { 

} 


class User { 

  # login : String

  # password : String  

+ {method} getLogin() : String

+ {method} getPassword() : String

} 

class Provider { 
 
-providerID : String

-cleanerID : STring

+ {method} GetProviderID() : String

+{method} GetCleanerID() : String

+{method} AfficherProvider() : void

}



class Sensor{

-sensorID : String 
 
-longitude : Float

-latitude : Float

+{method} GetSensorID() : String

+{method} GetLongitude() : Float

+{method} GetLatitude() : Float
}

class Measurement {
-timestamp : String

-sensorID : String

-attributID : String

-date : Timestamp

-value : Float 

+{method} GetTimestamp() : String

+{method} GetSensorID() : String

+{method} GetAttributID() : String

+{method} GetValue() : Float

+{method} GetDate() : Timestamp

+{method} AfficherMeasurement() : void
}

class Attribute {
-attributeId : String

-unit : String

-desciption : String

+{method} getAttributeId() : String

+{method} getUnit() : String

+{method} getDescription() : String

}

class Cleaner {

-cleanerID : String

-latitude : Float

-longitude : Float

-timestampStart : Timestamp

-timestampStop : Timestamp


+{method} getCleanerID() : String

+{method} getLatitude() : Float

+{method} getLongititude() : Float

+{method} getTimestampStart() : Timestamp

+{method} getTimestampStop() : Timestamp
} 



class PrivateIndividual { 
-privateIndividualId : String

-fidelityPoint : Int

-reliable : Boolean

+{method} getPrivateIndividualId() : String

+{method} getFidelityPoint() : Int

+{method} getReliable() : Boolean

} 

class DataBase{

-sensors : Vector<Sensor>

-measurements : Vector<Measurement>

-attributes : Vector<Attribute>

-cleaners : Vector<Cleaner>

-privateIndivs : Vector<PrivateIndividual> 

-providers : Vector<Provider>

+{method} GetSensors() : vector<Sensor>

+{method} GetMeasurements() : vector<Measurement>

+{method} GetAttributes(): vector<Attribute>

+{method} GetCleaners() : vector<Cleaner>

+{method} GetPrivatesIndivs() : vector<PrivateIndividual>

+{method} GetProviders(): vector<Provider>

+{method} updatePrivateIndivReliability() : Boolean 
}

  
}


User <|-- Provider : Héritage 

User <|-- GovAgency : Héritage 

User <|-- PrivateIndividual : Héritage 

Measurement "*" --> "1" Attribute 

Measurement "*" <-- "1" Sensor 

Provider "1" --> "*" Cleaner 

PrivateIndividual "1" --> "*" Sensor 

DataBase "1" --> "*" Sensor 

DataBase "1" --> "*" Measurement 

DataBase "1" --> "*" Cleaner

DataBase "1" --> "*" Attribute

DataBase "1" --> "*" PrivateIndividual

DataBase "1" --> "*" Provider
@enduml
